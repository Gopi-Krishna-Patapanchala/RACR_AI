import json
import pathlib
import oyaml as yaml


class Experiment:
    """
    The Experiment class represents a single experiment configured by the user.
    It's initialized with an absolute path to the experiment's directory, which
    should contain all the information necessary to construct an experiment
    instance, which should then be able to run the experiment with a variety of
    user-specified parameters.

    The basic structure of an experiment directory looks like this:

    .
    └── MyExperiment/
        ├── Models/
        │   ├── alexnet.pt
        │   └── vgg.pth
        ├── Datasets/
        │   ├── testset_as_directory/
        │   │   ├── hotdog.jpg
        │   │   ├── not_a_hotdog.jpg
        │   │   └── labels.txt
        │   ├── testset_as_file.csv
        │   └── testset_as_getter.py
        ├── Output/
        │   └── results_230709_113044.csv
        ├── NodeTypes/
        │   ├── Type1/
        │   │   ├── main.py
        │   │   ├── src/
        │   │   │   ├── module1.py
        │   │   │   └── module2.py
        │   │   ├── requirements.txt
        │   │   ├── .python-version
        │   │   └── nodeconfig.yaml
        │   └── Type2/
        │       └── ...
        ├── README.md
        └── experimentconfig.yaml

    Models/ (directory)
    -------------------
        Contains all the models available for use in the experiment,
        stored as PyTorch .pt or .pth files.

    Datasets/ (directory)
    ---------------------
        Contains all the datasets available for use in the experiment,
        stored as one of the following:
            - a directory of files along with a labels.txt
              or labels.csv file
            - a single file containing all the data, (tabular data)
            - a python script that returns a dataset in one of the
              above formats (e.g. a script that downloads a dataset)

    Output/ (directory)
    -------------------
        Contains all the output files generated by the experiment.

    NodeTypes/ (directory)
    ----------------------
        Contains subdirectories outlining the different types of nodes
        available for use in the experiment (e.g., "Client", "Server").
        Each subdirectory contains the following components:
            - main.py
                The main runtime script for the node.
            - src/ (directory)
                A directory containing all the custom modules used by
                the node.
            - requirements.txt
                A list of dependencies for the node, which will be used
                to create a virtual environment for the node.
            - .python-version
                A file containing the python version to use for the
                node's virtual environment.
            - nodeconfig.yaml
                A file containing the node's configuration, which can
                be modified by the user.

    README.md
    ---------
        A markdown file containing a description of the experiment.
        When an experiment directory is first created, this file contains
        a template for the user to fill out, as well as a description of
        the experiment's directory structure, much like this one.

    experimentconfig.yaml
    ---------------------
        A file containing the experiment's configuration, which can be
        modified by the user.

    Note that participating devices must have the following dependencies
    installed to properly run experiments:
        pyenv
            allows the experiment to enforce a specific python version
        venv
            allows the experiment to create a virtual environment on the
            device
    """

    name: str

    def __init__(self, experiment_dir: pathlib.Path):
        self.name = name
        self.code_dir = code_dir
        self.config = config

    def run(self, parameters):
        pass  # Implement experiment running


class Config:
    """
    Parent class for ExperimentConfig and NodeConfig.
    """

    filepath: pathlib.Path
    default_template: dict = {}

    def __init__(self, fp: pathlib.Path):
        self.filepath = fp
        if not (
            self.filepath.exists()
            and self.filepath.is_file()
            and self.filepath.suffix == ".yaml"
        ):
            raise ValueError(f"No config file found at {fp}")
        else:
            try:
                with open(self.filepath, "r") as f:
                    _ = yaml.safe_load(f)
            except Exception as e:
                raise ValueError(f"Error loading config file at {fp}: {e}")

    def load(self) -> dict:
        with open(self.filepath, "r") as f:
            return yaml.safe_load(f)

    def save(self, data):
        with open(self.filepath, "w") as f:
            yaml.safe_dump(data, f)

    def getval(self, *keys):
        data = self.load()
        for key in keys:
            try:
                data = data[key]
            except KeyError:
                return None
        return data

    def setval(self, *keys, value=None):
        if not value:
            raise ValueError("'value' kwarg must be specified")
        data = self.load()
        for key in keys[:-1]:
            try:
                data = data[key]
            except KeyError:
                raise ValueError(f"Invalid key: {key}")

        data[keys[-1]] = value
        self.save(data)


class ExperimentConfig(Config):
    """
    Represents the experimentconfig.yaml file in an experiment directory.
    """

    default_template = {
        "meta": {
            "name": "",
            "date_created": "",
            "last_modified": "",
        },
        "datasets": {
            "directory": "Datasets",
        },
        "models": {
            "directory": "Models",
        },
        "output": {
            "directory": "Output",
        },
        "nodes": {"Client": {"depends_on": "Server"}, "Server": {"depends_on": None}},
        "runtime": {
            "run_command_parameters": ["NUM_CLIENTS", "SPLIT_LAYER"],
        },
    }

    def __init__(self, fp: pathlib.Path):
        super().__init__(fp)


class NodeConfig(Config):
    """
    Represents the nodeconfig.yaml file in a node directory.
    """

    default_template = {}

    def __init__(self, fp: pathlib.Path):
        super().__init__(fp)


class ExperimentManager:
    def __init__(self):
        self.experiments = []

    def create_new_experiment(self, name, **kwargs):
        experiment = Experiment(name, code_dir, config)
        self.experiments.append(experiment)

    def run_experiment(self, name, parameters):
        for experiment in self.experiments:
            if experiment.name == name:
                experiment.run(parameters)
