#!/bin/bash

# Define Python version and the directory of this script and cd into it
PYTHON_VERSION="3.11.4"
DIR=$(realpath "$(dirname "${BASH_SOURCE[0]}")")
PROJECT_ROOT=$(realpath "$DIR/../../../")
EXIT_CODE=0

# Each bit in the exit code signifies a different error state:
# Bit 1 (value 1): Error while installing dependencies for pyenv
# Bit 2 (value 2): Error while installing pyenv
# Bit 3 (value 4): Error while installing Python with pyenv
# Bit 4 (value 8): Error while creating virtual environment
# Bit 5 (value 16): Error while activating the virtual environment
# Bit 6 (value 32): Error while installing dependencies from requirements.txt
# Bit 7 (value 64): Error while creating directory ~/.tracr/

# Define the step names for pretty print at the end
declare -A step_names
step_names=( [1]="Installing dependencies for pyenv" [2]="Installing pyenv" [3]="Installing Python with pyenv" [4]="Creating virtual environment" [5]="Activating the virtual environment" [6]="Installing dependencies from requirements.txt" [7]="Creating directory ~/.tracr/")

# Error checking function
function check_error() {
    if [ $? -ne 0 ]
    then
        echo "Error: $1"
        EXIT_CODE=$((EXIT_CODE | $2))
    fi
}

# cd into the project root
cd $PROJECT_ROOT

# Install dependencies for pyenv
echo ""
echo "------------------------------------"
echo "Installing dependencies for tracr..."
echo "------------------------------------"
echo ""
install_tracr_dependencies="$DIR/src/install_tracr_dependencies"
$install_tracr_dependencies

check_error "Failed to install dependencies for tracr" 1

# Check if pyenv is already installed
if ! command -v pyenv &> /dev/null
then
    # install it
    echo ""
    echo "-------------------"
    echo "Installing pyenv..."
    echo "-------------------"
    echo ""
    curl -L https://pyenv.run | bash
    check_error "Failed to install pyenv" 2

    # Add pyenv to bashrc
    echo ""
    echo "-------------------------"
    echo "Adding pyenv to bashrc..."
    echo "-------------------------"
    echo ""

    if [ -e ~/.profile ]; then
        profile=~/.profile
    elif [ -e ~/.bash_profile ]; then
        profile=~/.bash_profile
    elif [ -e ~/.bash_login ]; then
        profile=~/.bash_login
    else
        touch ~/.profile
        profile=~/.profile
    fi

    if ! grep -q 'export PYENV_ROOT="$HOME/.pyenv"' ~/.bashrc $profile; then
        echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc $profile
        echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc $profile
        echo 'eval "$(pyenv init -)"' >> ~/.bashrc $profile
        echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc $profile
        echo "Done."
    fi
fi

# Be extra sure that pyenv is in the path
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# Install Python with pyenv
echo ""
echo "--------------------------------------"
echo "Installing Python ${PYTHON_VERSION} with pyenv..."
echo "--------------------------------------"
echo ""
pyenv install -s ${PYTHON_VERSION}
check_error "Failed to install Python with pyenv" 4
echo "Done."

# Go to project root directory
cd "${PROJECT_ROOT}"

# Upgrade pip
echo ""
echo "--------------------------"
echo "Upgrading pip to latest..."
echo "--------------------------"
echo ""
pip install --upgrade pip
check_error "Failed to upgrade pip: $output" 4
echo "Done."

# Ensure venv is installed
echo ""
echo "-----------------------------"
echo "Ensuring venv is installed..."
echo "-----------------------------"
echo ""
pip install virtualenv
check_error "Failed to install virtualenv: $output" 4
echo "Done."

# Create a new virtual environment in the project root
echo ""
echo "------------------------------------------"
echo "Creating tracr-venv in the project root..."
echo "------------------------------------------"
echo ""
if ! command -v pyenv activate tracr-venv &> /dev/null
then
    pyenv virtualenv ${PYTHON_VERSION} tracr-venv
    check_error "Failed to create virtual environment" 8
    echo "Done."
else
    echo "Virtual environment already exists. Skipping..."
fi
pyenv local tracr-venv

# Activate the venv
echo ""
echo "----------------------"
echo "Activating the venv..."
echo "----------------------"
echo ""
pyenv activate tracr-venv
check_error "Failed to activate the virtual environment" 16
echo "Done."

# Upgrade pip to latest
pip install --upgrade pip

# Use pip to install dependencies from requirements.txt in project root
if [ -f requirements.txt ]; then
    echo ""
    echo "------------------------------------------------"
    echo "Installing dependencies from requirements.txt..."
    echo "------------------------------------------------"
    echo ""
    pip install -r requirements.txt
    check_error "Failed to install dependencies from requirements.txt" 32
else
    echo ""
    echo "-------------------------------------------------------------------------------"
    echo "requirements.txt not found in project root. Skipping dependency installation..."
    echo "-------------------------------------------------------------------------------"
    echo ""
fi

# Deactivate the venv
echo ""
echo "------------------------"
echo "Deactivating the venv..."
echo "------------------------"
echo ""
pyenv deactivate
echo "Done."

# Create the ~/.tracr directory
echo ""
echo "------------------------------"
echo "Creating ~/.tracr directory..."
echo "------------------------------"
echo ""
mkdir -p ~/.tracr
check_error "Failed to create directory ~/.tracr/" 64
echo "Done."

# Check exit code bits
echo ""
echo "--------------------------------------"
echo "Checking the setup steps for failures..."
echo "--------------------------------------"
echo ""
for i in {1..7}
do
    if (( (EXIT_CODE & (1 << ($i - 1))) != 0 )); then
        echo "${step_names[$i]}: Failed"
    else
        echo "${step_names[$i]}: Passed"
    fi
done

echo ""
echo "--------------------------------"
echo "Setup completed with exit code ${EXIT_CODE}!"
echo "--------------------------------"
echo ""

exit $EXIT_CODE
