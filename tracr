#!/usr/bin/env python3

"""
This script runs the "tracr" CLI, which is powered by the API that lives in 
the "api" folder on this repo.

For a cleaner experience, add this directory to your PATH, which will allow
you to run the CLI from anywhere, and without preceding the command with
the word "python".
"""

import argparse
from pathlib import Path

import api.network
import api.experiments
from api.config_mgr import Configs


# path to this file's location
project_root = Path(__file__).parent.absolute()

# path to console text files
textfiles = project_root / "setup" / "console_text"


# trivial function to be concise
def get_text(textfile: Path) -> str:
    with open(textfile, "r") as file:
        text = file.read()
    return text


# CLI is split up into submodules responsible for different operations, so
# there are lots of arguments that can be used, each with their own option
# flags and arguments. This is all organized using argparse


def device_ls(args):
    # initialize the config manager
    try:
        configs = Configs()
    except FileNotFoundError:
        print(
            "This machine hasn't been set up as a controller yet. Run 'tracr setup' to begin."
        )

    def get_known():
        devices = configs.get_known_devices()

    # explicitly set the flags to False if they are not set
    known = bool(args.known)
    unknown = bool(args.unknown)
    listening = bool(args.listening)
    ready = bool(args.ready)

    # if for some reason -ku or -lu is set, the correct output is none
    want_none = (known and unknown) or (ready and unknown)
    if want_none:
        print("No devices matching criteria")
        return

    # if no flags are set, then all devices should be shown
    want_all = not (known or unknown or listening or ready)
    if want_all:
        print("ALL DEVICES:")


def device_add(args):
    if args.wizard:
        pass
    if args.host:
        pass
    if args.user:
        pass
    if args.pw:
        pass
    if args.keys:
        pass
    if args.nickname:
        pass
    if args.description:
        pass


def network(args):
    if args.d:
        print(f"Status for host: {args.d}")
    elif args.e:
        print(f"Status for name: {args.e}")
    else:
        print("Running network")


def run(args):
    if args.e:
        print(f"Running with name: {args.e}")
    else:
        print("Running")


def setup(args):
    if args.d:
        print(f"Setup for host: {args.d}")
    elif args.e:
        print(f"Setup for name: {args.e}")
    else:
        print("Running setup")


def main():
    parser = argparse.ArgumentParser(
        description=get_text(textfiles / "tracr_description.txt"),
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    parser.add_argument(
        "-v",
        "--version",
        action="version",
        version=get_text(textfiles / "about_tracr.txt"),
    )
    subparsers = parser.add_subparsers(title="SUBMODULES")

    # parser for "device"
    parser_device = subparsers.add_parser(
        "device", help="Submodule for local device setup and configuration"
    )
    # add sub-sub parsers for the device module
    device_subparsers = parser_device.add_subparsers(title="DEVICE MODULE COMMANDS")
    parser_device_ls = device_subparsers.add_parser("ls", help="List devices")
    parser_device_ls.add_argument(
        "-k",
        "--known",
        action="store_true",
        help="only show known devices",
        dest="known",
    )
    parser_device_ls.add_argument(
        "-u",
        "--unknown",
        action="store_true",
        help="only show unknown devices",
        dest="unknown",
    )
    parser_device_ls.add_argument(
        "-l",
        "--listening",
        action="store_true",
        help="only show devices listening on port 22",
        dest="listening",
    )
    parser_device_ls.add_argument(
        "-r",
        "--ready",
        action="store_true",
        help="only show devices ready to run experiments",
        dest="ready",
    )
    parser_device_ls.set_defaults(func=device_ls)

    parser_device_add = device_subparsers.add_parser(
        "add", help="add new devices and configure them for experiments"
    )
    parser_device_add.add_argument(
        "-w",
        "--wizard",
        action="store_true",
        help="use a wizard to help with adding the new device",
        dest="wizard",
    )
    parser_device_add.add_argument(
        "-a",
        "--host",
        help="specify the hostname or IP address of the device to add",
        nargs=1,
        dest="host",
    )
    parser_device_add.add_argument(
        "-u",
        "--user",
        help="specify the username to connect with via SSH",
        nargs=1,
        dest="user",
    )
    parser_device_add.add_argument(
        "-p",
        "--pass",
        help="specify the password for SSH connections to the device",
        nargs=1,
        dest="pw",
    )
    parser_device_add.add_argument(
        "-k",
        "--keys",
        help="specify the public and private keys, separated by a space",
        nargs=2,
        dest="keys",
    )
    parser_device_add.add_argument(
        "-n",
        "--nickname",
        help="assign a nickname to the device",
        nargs=1,
        dest="nickname",
    )
    parser_device_add.add_argument(
        "-d",
        "--description",
        help="give a description to the device",
        nargs=1,
        dest="description",
    )
    parser_device_add.set_defaults(func=device_add)

    # Parser for "experiment"
    parser_experiment = subparsers.add_parser(
        "experiment", help="Submodule for managing experiments"
    )
    # Add sub-sub parsers for the experiment module
    exp_subparsers = parser_experiment.add_subparsers(help="experiment submodule help")
    parser_experiment_ls = exp_subparsers.add_parser(
        "ls", help="list experiments and experiment data"
    )
    parser_experiment_ls.add_argument(
        "-n",
        "--name",
        help="list the experiment names",
        action="store_true",
        dest="name",
    )
    parser_experiment_ls.add_argument(
        "-l",
        "--last-run",
        help="list the last time each experiment was run",
        action="store_true",
        dest="last_run",
    )
    parser_experiment_ls.add_argument(
        "-s",
        "--settings",
        help="list the settings for each experiment",
        action="store_true",
        dest="settings",
    )
    parser_experiment_run = exp_subparsers.add_parser("run", help="run an experiment")
    parser_experiment_run.add_argument(
        "name", nargs=1, help="the name of the experiment to be run"
    )
    parser_experiment_run.add_argument(
        "-o",
        "--output",
        help="specify a location for performance logging output",
        nargs=1,
        dest="output",
    )

    # Parser for 'setup'
    parser_setup = subparsers.add_parser("setup", help="Submodule for initial setup")
    parser_setup.add_argument("-d")
    parser_setup.add_argument("-e")
    parser_setup.set_defaults(func=setup)

    args = parser.parse_args()
    if "func" in args:
        args.func(args)
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
